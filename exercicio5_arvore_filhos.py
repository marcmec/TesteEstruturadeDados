# -*- coding: utf-8 -*-
"""exercicio5_arvore_filhos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VOgOEy7lZXjz-CAaLNrijs7P-yCOtinV
"""

class NoArvore:
  def __init__(self, valor):
    self.valor = valor
    self.esquerda = None
    self.direita = None

class ArvoreBinaria:
  def __init__(self):
    self.raiz = None

  def adicionar(self, valor):
    if self.raiz is None:
        self.raiz = NoArvore(valor)
    else:
        self._adicionar_recursivo(self.raiz, valor)

  def _adicionar_recursivo(self, no_atual, valor):
    if valor < no_atual.valor:
      if no_atual.esquerda is None:
        no_atual.esquerda = NoArvore(valor)
      else:
        self._adicionar_recursivo(no_atual.esquerda, valor)
    elif valor > no_atual.valor:
      if no_atual.direita is None:
        no_atual.direita = NoArvore(valor)
      else:
        self._adicionar_recursivo(no_atual.direita, valor)

  def mostrarFilhos(self, valor):
    no_atual = self._buscar_no(self.raiz, valor)
    filhos = []
    if no_atual.esquerda is not None:
      filhos.append(no_atual.esquerda.valor)
    if no_atual.direita is not None:
      filhos.append(no_atual.direita.valor)
    if filhos:
      print(filhos)

  def _buscar_no(self, no_atual, valor):
    if no_atual is None or no_atual.valor == valor:
      return no_atual
    if valor < no_atual.valor:
      return self._buscar_no(no_atual.esquerda, valor)
    else:
      return self._buscar_no(no_atual.direita, valor)

arvore = ArvoreBinaria()

arvore.adicionar(10)
arvore.adicionar(5)
arvore.adicionar(15)

arvore.mostrarFilhos(10)